generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  staff
  customer
}

enum RoomType {
  Deluxe
  Suite
}

enum RoomStatus {
  available
  booked
}

enum StaffRole {
  manager
  clerk
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum PaymentMode {
  cash
  card
  online
}

model User {
  id           Int       @id @default(autoincrement())
  name         String?
  phone        String    @unique
  email        String?   @unique
  passwordHash String?
  userType     UserType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
  deletedAt    DateTime?
  isDeleted    Boolean   @default(false)

  mobile_otp        String?
  otp_expire_time   DateTime?
  is_verified       Boolean   @default(false)
  last_login_mobile DateTime?

  bookings Booking[]
}

model Room {
  id         Int        @id @default(autoincrement())
  roomType   RoomType
  roomNumber String
  status     RoomStatus
  facilities String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  createdBy  Int?
  updatedBy  Int?
  deletedBy  Int?
  deletedAt  DateTime?
  isDeleted  Boolean    @default(false)

  bookings Booking[]
  photos   RoomPhoto[]
}

model RoomPrice {
  id             Int       @id @default(autoincrement())
  roomType       RoomType
  dateFrom       DateTime
  dateTo         DateTime
  priceMember    Float
  priceNonMember Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?
  deletedAt      DateTime?
  isDeleted      Boolean   @default(false)
}

model Booking {
  id               Int           @id @default(autoincrement())
  userId           Int
  roomId           Int
  fromDate         DateTime
  toDate           DateTime
  isMember         Boolean
  membershipNumber String?
  idProofUrl       String?
  paymentStatus    PaymentStatus
  paymentMode      PaymentMode
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  createdBy        Int?
  updatedBy        Int?
  deletedBy        Int?
  deletedAt        DateTime?
  isDeleted        Boolean       @default(false)

  user    User     @relation(fields: [userId], references: [id])
  room    Room     @relation(fields: [roomId], references: [id])
  payment Payment?
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int           @unique
  amount        Float
  mode          PaymentMode
  status        PaymentStatus
  transactionId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  createdBy     Int?
  updatedBy     Int?
  deletedBy     Int?
  deletedAt     DateTime?
  isDeleted     Boolean       @default(false)

  booking Booking @relation(fields: [bookingId], references: [id])
}

model StaffUser {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String
  role         StaffRole
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
  deletedAt    DateTime?
  isDeleted    Boolean   @default(false)
}

model RoomPhoto {
  id        Int       @id @default(autoincrement())
  roomId    Int
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  room Room @relation(fields: [roomId], references: [id])
}

model ReportCache {
  id        Int       @id @default(autoincrement())
  data      Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
}
